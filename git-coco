#!/bin/bash

# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

command="$1"
shift

fail() {
    echo "$1" >&2
    exit 1
}

url_parser() {
    local url
    local profile repo
    local codecommit_grc_regex="^codecommit::[a-z][a-z]-[a-z]+-[1-3]:\/\/"
    local codecommit_url_regex="^http[s]?:\/\/git-codecommit\."

    url="$1"

    # codecommit:// url
    if [[ $url =~ $codecommit_grc_regex ]]; then
        profile="$(echo $url | awk -F '[/@]' '{print $3}')"
        repo="$(echo $url | awk -F '[/@]' '{print $4}')"

        # If no profile set repo to what was parsed to profile otherwise set parsed profile to global profile
        if [ -z "$repo" ]; then
            repo="$profile"
        else
            _profile="$profile"
        fi

    # https:// url
    else
        if [[ $url =~ $codecommit_url_regex ]]; then
            repo="$(echo $url | awk -F '/' '{print $NF}')"
        fi
    fi

    echo $repo
}

_profile=''
_profile() {
    # If there's a profile specified, make sure we
    # pass that around
    if [ -z "$_profile" ]; then
        _profile="$(aws configure list | awk '/^[[:space:]]*profile/{print $2}')"
    fi

    if [ "$_profile" = "<not" ]; then
        echo ""
    else
        echo "$_profile"
    fi
}

# Wrapper function around the AWS CLI tool
#
# It will invoke the AWS CLI tool with the currently selected
# profile or provide a properly quoted string which does so.
_aws_cli=''
aws_cli() {
    local aws profile
    local aws_quoted_str profile_quoted_str

    profile="$(_profile)"

    if [ -z "$_aws_cli" ]; then
        _aws_cli="$(command -v aws)"
    fi

    aws=("$_aws_cli")
    aws_quoted_str="$(set | awk '/^_aws_cli=/{ sub(/^_aws_cli=/, ""); print; }')"
    if [ -n "$profile" ]; then
        aws+=(--profile "$profile")

        profile_quoted_str="$(set | awk '/^profile=/{ sub(/^profile=/, ""); print; }')"
        aws_quoted_str+=" --profile $profile_quoted_str"
    fi

    if [ "$1" = '@print_quoted@' ]; then
        echo "${aws_quoted_str}"
        return
    fi

    "${aws[@]}" "$@"
}

list() {
    local repos repo

    if [ "$#" != '0' ]; then
        fail 'Usage: git coco list'
    fi

    read -r -a repos < <(
        aws_cli codecommit list-repositories \
            --output text \
            --query repositories[].repositoryName
    )

    for repo in "${repos[@]}"; do echo "$repo"; done
}

create() {
    local repo description

    repo="$1"
    description="$2"

    if [ "$#" -lt '1' ] || [ "$#" -gt '2' ] || [ -z "$repo" ]; then
        fail "Usage: git coco create <repo> <description>"
    fi

    aws_cli codecommit create-repository \
        --repository-name "$repo" \
        --repository-description "$description" \
        --output text \
        --query repositoryMetadata.cloneUrlHttp
}

remove() {
    local repo
    local output confirmation

    repo="$1"

    if [ "$#" != '1' ] || [ -z "$repo" ]; then
        fail "Usage: git coco rm <repo>"
    fi

    read -r -p "Are you sure? [Y/n] " confirmation

    case "$confirmation" in
        Y|y)
            ;;
        *)
            fail "Aborting"
            ;;
    esac

    output="$(aws_cli codecommit delete-repository \
        --repository-name "$repo")"

    if [ -z "$output" ]; then
        fail "No such repo: $repo"
    else
        echo "Successfully removed $repo"
    fi
}

clone() {
    local repo
    local url
    local grc_path
    local profile

    repo="$1"

    if [ "$#" != '1' ] || [ -z "$repo" ]; then
        fail "Usage: git coco clone <repo>"
    fi

    # If the repo was specified as an URL, use that URL
    case "$repo" in
        codecommit:*|http://*|https://*)
            url="$repo"
            ;;
    esac

    # If no URL was specified, lookup the URL from AWS CodeCommit
    if [ -z "$url" ]; then
        grc_path="$(command -v git-remote-codecommit)"
        if [ -n "$grc_path" ]; then
            profile="$(_profile)"
            url="$(aws codecommit get-repository \
                --repository-name "$repo" \
                --output text \
                --query repositoryMetadata.Arn \
                | \
                awk -v profile="$profile" -F: '{
                    region = $4;
                    repo = $NF;
                    if (profile != "") {
                        print "codecommit::" region "://" profile "@" repo
                    } else {
                        print "codecommit::" region "://" repo
                    }
                }')"
        else
            url="$(aws_cli codecommit get-repository \
                --repository-name "$repo" \
                --output text \
                --query repositoryMetadata.cloneUrlHttp)"
        fi
    fi

    case "$url" in
        '')
            fail "No such repo: $repo"
            ;;
        codecommit:*)
            git clone "$url"
            ;;
        *)
            git clone \
                -c credential.helper="" \
                -c credential.helper="!$(aws_cli @print_quoted@) codecommit credential-helper \"\$@\"" \
                -c credential.UseHttpPath=true \
                "$url"
            ;;
    esac
}

pr() {
    local branch target
    local url repo id

    branch="$1"
    target="$2"

    if [ -z "$branch" ]; then
        branch="$(git rev-parse --abbrev-ref HEAD)"
    fi

    if [ -z "$target" ]; then
        target="master"
    fi

    url="$(git remote get-url origin)"
    repo="$(basename "$url")"

    id="$(aws_cli codecommit create-pull-request \
        --title "$branch" \
        --targets "repositoryName=$repo,sourceReference=$branch,destinationReference=$target" \
        --output text \
        --query pullRequest.pullRequestId)"

    echo "https://console.aws.amazon.com/codesuite/codecommit/repositories/${repo}/pull-requests/${id}/changes"
}

prlist() {
    local repo list_of_prs pull_info
    local dst_branch src_branch pull_id author title

    repo="$1"

    # Handle default case
    if [ -z "$repo" ]; then
        local urls=$(git remote -v | awk -F ' ' '{ print $2; }')

        for url in $urls; do
            repo="$(url_parser "$url")"

            # Break out of loop if valid repo is found
            if [[ ! -z "$repo" ]]; then
                break
            fi
        done

        if [ -z "$repo" ]; then
            fail "No repository provided. Current directory does not have a valid codecommit repository."
        fi
    fi

    local header="%-10s %-60s %-100s\n"
    local format="%-10s %-60s %s <- %s (%s)\n"
    local pr_query="pullRequest.{PR: pullRequestId, Title: title, DstBranch: pullRequestTargets[0].destinationReference, SrcBranch: pullRequestTargets[0].sourceReference, Author: authorArn}"

    # Retrieve list of PRs for specified repo
    local list_of_prs="$(aws_cli codecommit list-pull-requests \
        --repository-name "$repo" \
        --pull-request-status OPEN \
        --query="pullRequestIds" \
        --output text)"
    printf "$header" "PR #" "Title" "Branch"

    # Get and parse information for each PR
    for pull_request in $list_of_prs; do
        (
            local pull_info="$(aws_cli codecommit get-pull-request \
            --pull-request-id "$pull_request" \
            --query "$pr_query" \
            --output text)"

            local dst_branch src_branch pull_id author title

            IFS=$'\t' read -r author dst_branch pull_id src_branch title <<< "${pull_info}"

            author="$(echo $author | awk -F '/' '{print $NF}')"
            dst_branch="$(echo "${dst_branch/refs\/heads\/}")"
            src_branch="$(echo "${src_branch/refs\/heads\/}")"

            printf "$format" "$pull_id" "$title" "$dst_branch" "$src_branch" "$author"
        ) &
    done
    wait
}

case "$command" in
    ls)
        list "$@" || exit 1
        ;;
    create)
        create "$@" || exit 1
        ;;
    clone)
        clone "$@" || exit 1
        ;;
    rm)
        remove "$@" || exit 1
        ;;
    init)
        create "$@" >/dev/null
        clone "$1" || return 1
        ;;
    pr)
        pr "$@" || exit 1
        ;;
    prlist)
        prlist "$@" || exit 1
        ;;
    *)
        fail "Usage: git coco ls|create|clone|rm|init|pr|prlist"
        ;;
esac
