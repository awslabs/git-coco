#!/bin/bash

# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

command="$1"
shift

fail() {
    echo "$1" >&2
    exit 1
}

# Wrapper function around the AWS CLI tool
#
# It will invoke the AWS CLI tool with the currently selected
# profile or provide a properly quoted string which does so.
_profile=''
_aws_cli=''
aws_cli() {
    local aws
    local aws_quoted_str profile_quoted_str

    # If there's a profile specified, make sure we
    # pass that around
    if [ -z "$_profile" ]; then
        _profile="$(aws configure list | awk '/^[[:space:]]*profile/{print $2}')"
    fi

    # Similarly, use the same AWS CLI
    if [ -z "$_aws_cli" ]; then
        _aws_cli="$(command -v aws)"
    fi

    aws=("$_aws_cli")
    aws_quoted_str="$(set | awk '/^_aws_cli=/{ sub(/^_aws_cli=/, ""); print; }')"
    if [ "$_profile" != "<not" ]; then
        aws+=(--profile "$_profile")

        profile_quoted_str="$(set | awk '/^_profile=/{ sub(/^_profile=/, ""); print; }')"
        aws_quoted_str+=" --profile $profile_quoted_str"
    fi

    if [ "$1" = '@print_quoted@' ]; then
        echo "${aws_quoted_str}"
        return
    fi

    "${aws[@]}" "$@"
}

get_arn(){
    local repo
    local region
    local account_number
    local arn

    repo="$1"

    region="$(aws_cli configure get region)"
    account_number="$(aws_cli sts get-caller-identity --query 'Account' --output text )"
    arn="arn:aws:codecommit:${region}:${account_number}:${repo}"

    echo "$arn"
}

list() {
    local repos repo

    if [ "$#" != '0' ]; then
        fail 'Usage: git coco list'
    fi

    read -r -a repos < <(
        aws_cli codecommit list-repositories \
            --output text \
            --query repositories[].repositoryName
    )

    for repo in "${repos[@]}"; do echo "$repo"; done
}

create() {
    local repo description

    repo="$1"
    description="$2"

    if [ "$#" -lt '1' ] || [ "$#" -gt '2' ] || [ -z "$repo" ]; then
        fail "Usage: git coco create <repo> <description>"
    fi

    aws_cli codecommit create-repository \
        --repository-name "$repo" \
        --repository-description "$description" \
        --output text \
        --query repositoryMetadata.cloneUrlHttp
}

remove() {
    local repo
    local output confirmation

    repo="$1"

    if [ "$#" != '1' ] || [ -z "$repo" ]; then
        fail "Usage: git coco rm <repo>"
    fi

    read -r -p "Are you sure? [Y/n] " confirmation

    case "$confirmation" in
        Y|y)
            ;;
        *)
            fail "Aborting"
            ;;
    esac

    output="$(aws_cli codecommit delete-repository \
        --repository-name "$repo")"

    if [ -z "$output" ]; then
        fail "No such repo: $repo"
    else
        echo "Successfully removed $repo"
    fi
}

clone() {
    local repo
    local url

    repo="$1"

    if [ "$#" != '1' ] || [ -z "$repo" ]; then
        fail "Usage: git coco clone <repo>"
    fi

    url="$(aws_cli codecommit get-repository \
        --repository-name "$repo" \
        --output text \
        --query repositoryMetadata.cloneUrlHttp)"

    if [ -z "$url" ]; then
        fail "No such repo: $repo"
    else
        git clone \
            -c credential.helper="!$(aws_cli @print_quoted@) codecommit credential-helper \"\$@\"" \
            -c credential.UseHttpPath=true \
            "$url"
    fi
}

pr() {
    local branch target
    local url repo id

    branch="$1"
    target="$2"

    if [ -z "$branch" ]; then
        branch="$(git rev-parse --abbrev-ref HEAD)"
    fi

    if [ -z "$target" ]; then
        target="master"
    fi

    url="$(git remote get-url origin)"
    repo="$(basename "$url")"

    id="$(aws_cli codecommit create-pull-request \
        --title "$branch" \
        --targets "repositoryName=$repo,sourceReference=$branch,destinationReference=$target" \
        --output text \
        --query pullRequest.pullRequestId)"

    echo "https://console.aws.amazon.com/codesuite/codecommit/repositories/${repo}/pull-requests/${id}/changes"
}

tag(){
    local repo arn

    repo="$1"
    tags="$2"

    if [ "$#" -lt '1' ] || [ "$#" -gt '2' ] || [ -z "$repo" ]; then
        fail "Usage: git coco tag <repo> <tagKey=tagValue,tagKey2=tagValue2,...>"
    fi

    arn=$(get_arn $repo)

    aws_cli codecommit tag-resource \
        --resource-arn "$arn" \
        --tags "$tags"

}

case "$command" in
    ls)
        list "$@" || exit 1
        ;;
    create)
        create "$@" || exit 1
        ;;
    clone)
        clone "$@" || exit 1
        ;;
    rm)
        remove "$@" || exit 1
        ;;
    init)
        create "$@" >/dev/null
        clone "$1" || return 1
        ;;
    pr)
        pr "$@" || exit 1
        ;;
    tag)
        tag "$@" || exit 1
        ;;
    *)
        fail "Usage: git coco ls|create|clone|rm|init|pr"
        ;;
esac
